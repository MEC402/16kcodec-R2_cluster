import os

FILE_IDS = list(range(int(os.environ.get("RANGE").split(",")[0]),int(os.environ.get("RANGE").split(",")[1])))
SOURCE_DIR =  os.environ.get("SRC_DIR")
OUTPUT_DIR = os.environ.get("OUT_DIR")
TMP_DIR = os.environ.get("TMP_DIR")
SOURCE_FILENAMES = expand("anim_{i}_4k.png", i=FILE_IDS)
DIFFERENCES_FILENAMES = expand("anim_{i}_4k_diff.png", i=FILE_IDS[:-1])

print("Source dir: " + SOURCE_DIR)
print("Temporal dir: " + TMP_DIR)
print("Output dir: " + OUTPUT_DIR)

def differencess_shell_run():
    for i in range(len(SOURCE_FILENAMES)-1):
        shell("python module_movement_detection.py {} {}".format(SOURCE_FILENAMES[i], SOURCE_FILENAMES[i+1]))

def mask_generation_shell_run():
    for i in range(len(DIFFERENCES_FILENAMES)):
        shell("python module_mask_generation.py {}".format(DIFFERENCES_FILENAMES[i]))


rule all:
    input:
        #"../tmp/differences/output.mp4",
        #"../tmp/mask_foo.rpt",
        #"../tmp/masks/tracker.pkl"
        #expand("{tmp}mask_foo.rpt", tmp=TMP_DIR),
        #expand("{tmp}tracker.pkl", tmp=TMP_DIR),
        #expand("{tmp}objects_foo.rpt", tmp=TMP_DIR),
        "{}output.16kc".format(OUTPUT_DIR)
        #expand("{tmp}differences/anim_{i}_4k_diff.png", i=FILE_IDS[:-1], tmp=TMP_DIR)

### DIFFERENCES ------------------------------------------------------
rule differences:
    input:
        #expand("/scratch/ilopez/16k_video_source/anim_{i}_4k.png", i=FILE_IDS)
        expand("{src}anim_{i}_4k.png", i=FILE_IDS, src=SOURCE_DIR)
    output:
        #expand("../tmp/differences/anim_{i}_4k_diff.png", i=FILE_IDS[:-1])
        expand("{tmp}differences/anim_{i}_4k_diff.png", i=FILE_IDS[:-1], tmp=TMP_DIR)
    shell:
        differencess_shell_run()

"""
rule get_video_differences:
    input:
        "../tmp/differences/",
        expand("../tmp/differences/anim_{i}_4k_diff.png", i=FILE_IDS[:-1])
    output:
        "../tmp/differences/output.mp4"
    shell:
        "python tools/VideoCompositionFromFrames.py {input}"
"""

### MASKS ------------------------------------------------------
rule masks:
    input:
        #expand("../tmp/differences/anim_{i}_4k_diff.png", i=FILE_IDS[:-1])
        expand("{tmp}differences/anim_{i}_4k_diff.png", i=FILE_IDS[:-1], tmp=TMP_DIR)
    output:
        #dynamic("../tmp/masks/anim_{i}_4k_diff_m{obj}.png")
        dynamic(expand("{tmp}masks/anim_{i}_4k_diff_m{obj}.png", tmp=TMP_DIR, i="{i}", obj="{obj}"))
    shell:
        mask_generation_shell_run()

rule generate_masks:
    input:
        #dynamic("../tmp/masks/anim_{i}_4k_diff_m{obj}.png")
        dynamic(expand("{tmp}masks/anim_{i}_4k_diff_m{obj}.png", tmp=TMP_DIR, i="{i}", obj="{obj}"))
        	
    output:
        #"../tmp/mask_foo.rpt"
        expand("{tmp}mask_foo.rpt", tmp=TMP_DIR)
    shell:
        "echo foo > {}mask_foo.rpt".format(TMP_DIR)


### BBOXES ------------------------------------------------------
rule generate_bboxes:
    input:
        #"../tmp/masks/"
        expand("{tmp}mask_foo.rpt", tmp=TMP_DIR)
    output:
        #"../tmp/masks/tracker.pkl"
        expand("{tmp}tracker.pkl", tmp=TMP_DIR)
    shell:
        "python module_find_bboxes.py {}masks/".format(TMP_DIR)

### GENERATE VIDEO OBJECTS --------------------------------------
rule objects:
    input:
        SOURCE_DIR,
        "{}tracker.pkl".format(TMP_DIR)
    output:
        dynamic(expand("{out}objects/{id}.avi", out=OUTPUT_DIR, id="{id}"))
    shell:
        "python module_generate_obj_videos.py {} {}tracker.pkl {}".format(SOURCE_DIR, TMP_DIR, OUTPUT_DIR) 

rule generate_video_objects:
    input:
        dynamic(expand("{out}objects/{id}.avi", out=OUTPUT_DIR, id="{id}"))
    output:
        "{}objects_foo.rpt".format(TMP_DIR)
    shell:
        "echo foo > {}objects_foo.rpt".format(TMP_DIR)


### GENERATE STREAMS
rule streams:
	input:
		"{}tracker.pkl".format(TMP_DIR),
		"{}objects/".format(OUTPUT_DIR),
		"{}background.png".format(OUTPUT_DIR),
		"{}objects_foo.rpt".format(TMP_DIR)
	output:
		"{}output.16kc".format(OUTPUT_DIR)
	shell:
		"python module_build_streams.py {}tracker.pkl {}objects/".format(TMP_DIR, OUTPUT_DIR)
